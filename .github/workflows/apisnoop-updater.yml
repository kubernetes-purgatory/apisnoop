name: apisnoop updater

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 12 * * *"


jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: configure system
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client netcat
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh auth status

      - name: start SnoopDB
        run: |
          docker run -e POSTGRES_USER=apisnoop -e POSTGRES_DB=apisnoop -e LOAD_K8S_DATA=true --name snoopdb -d -p 5432:5432 gcr.io/k8s-staging-apisnoop/snoopdb:v20230912-snoopdb-1.3.0-18-g6d8162d
          until psql -U apisnoop -d apisnoop -h localhost -c 'select 0;'; do 
            docker logs --tail=100 snoopdb
            sleep 10s
          done

      - name: run 505_output_coverage_jsons
        run: |
          cd $(git rev-parse --show-toplevel)
          psql -U apisnoop -d apisnoop -h localhost -f ./505_output_coverage_jsons.sql

      - id: branch
        name: determine branch
        run: |
          TIMESTAMP="$(date +%Y-%m-%d-%H-%M)"
          NEW_BRANCH="coverage-update-for-${TIMESTAMP}"
          EXISTING_BRANCH="$(gh pr list --json number,title,labels,headRefName --jq 'select(.[].labels[] | contains("apisnoop-updater")) | .[0].headRefName')"
          if [ -n "$EXISTING_BRANCH" ]; then
            NEW_BRANCH="$EXISTING_BRANCH"
            echo "has-existing=true" >> $GITHUB_OUTPUT
          fi
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "branch=$NEW_BRANCH" >> $GITHUB_OUTPUT
      - name: commit and push if there are changes
        env:
          TIMESTAMP: ${{ steps.branch.outputs.timestamp }}
          NEW_BRANCH: ${{ steps.branch.outputs.branch }}
          HAS_EXISTING_BRANCH: ${{ steps.branch.outputs.has-existing }}
        run: |
          if { git ls-files --others --exclude-standard ; git diff-index --name-only --diff-filter=d HEAD ; } | grep --regexp='[.]json$'; then
              echo changes detected
            else
              exit 0
          fi
          git add resources/coverage/*.json
          git branch "${NEW_BRANCH}"
          git checkout "${NEW_BRANCH}"
          git commit -s -m "update coverage for ${TIMESTAMP}"
          git push -f origin "${NEW_BRANCH}"
          if ! gh label list --json name --jq .[].name | grep -Eq '^apisnoop-updater'; then
            gh label create apisnoop-updater || true
          fi
          if [ "$HAS_EXISTING_BRANCH" = true ]; then
            gh pr edit "${NEW_BRANCH}" --title "Update APISnoop coverage ${TIMESTAMP}" --body "updates to coverage for ${TIMESTAMP}"
          else
            gh pr create --label apisnoop-updater --title "Update APISnoop coverage ${TIMESTAMP}" --body "updates to coverage for ${TIMESTAMP}"
          fi
